# coding: utf-8

"""
    SuprSend API

    SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

    The version of the OpenAPI document: 1.2.1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from supr_send_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from supr_send_python_sdk.api_response import AsyncGeneratorResponse
from supr_send_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from supr_send_python_sdk import schemas  # noqa: F401

from supr_send_python_sdk.model.subscriber_update_user_preferences_category_request_opt_out_channels import SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels as SubscriberUpdateUserPreferencesCategoryRequestOptOutChannelsSchema
from supr_send_python_sdk.model.subscriber_update_user_preferences_category_request import SubscriberUpdateUserPreferencesCategoryRequest as SubscriberUpdateUserPreferencesCategoryRequestSchema

from supr_send_python_sdk.type.subscriber_update_user_preferences_category_request import SubscriberUpdateUserPreferencesCategoryRequest
from supr_send_python_sdk.type.subscriber_update_user_preferences_category_request_opt_out_channels import SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels

from ...api_client import Dictionary
from supr_send_python_sdk.pydantic.subscriber_update_user_preferences_category_request_opt_out_channels import SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels as SubscriberUpdateUserPreferencesCategoryRequestOptOutChannelsPydantic
from supr_send_python_sdk.pydantic.subscriber_update_user_preferences_category_request import SubscriberUpdateUserPreferencesCategoryRequest as SubscriberUpdateUserPreferencesCategoryRequestPydantic

# Query params
TenantIdSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'tenant_id': typing.Union[TenantIdSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_tenant_id = api_client.QueryParameter(
    name="tenant_id",
    style=api_client.ParameterStyle.FORM,
    schema=TenantIdSchema,
    explode=True,
)
# Path params
DistinctIdSchema = schemas.StrSchema
CategorySlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'distinct_id': typing.Union[DistinctIdSchema, str, ],
        'category_slug': typing.Union[CategorySlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_distinct_id = api_client.PathParameter(
    name="distinct_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=DistinctIdSchema,
    required=True,
)
request_path_category_slug = api_client.PathParameter(
    name="category_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CategorySlugSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = SubscriberUpdateUserPreferencesCategoryRequestSchema


request_body_subscriber_update_user_preferences_category_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_user_preferences_category_mapped_args(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        _body = {}
        if preference is not None:
            _body["preference"] = preference
        if opt_out_channels is not None:
            _body["opt_out_channels"] = opt_out_channels
        args.body = _body
        if tenant_id is not None:
            _query_params["tenant_id"] = tenant_id
        if distinct_id is not None:
            _path_params["distinct_id"] = distinct_id
        if category_slug is not None:
            _path_params["category_slug"] = category_slug
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aupdate_user_preferences_category_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update User Preferences (Category level)
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_distinct_id,
            request_path_category_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_tenant_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/subscriber/{distinct_id}/category/{category_slug}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_subscriber_update_user_preferences_category_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_user_preferences_category_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update User Preferences (Category level)
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_distinct_id,
            request_path_category_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_tenant_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/subscriber/{distinct_id}/category/{category_slug}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_subscriber_update_user_preferences_category_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateUserPreferencesCategoryRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_user_preferences_category(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_user_preferences_category_mapped_args(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
        )
        return await self._aupdate_user_preferences_category_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def update_user_preferences_category(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_user_preferences_category_mapped_args(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
        )
        return self._update_user_preferences_category_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
        )

class UpdateUserPreferencesCategory(BaseApi):

    async def aupdate_user_preferences_category(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.aupdate_user_preferences_category(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def update_user_preferences_category(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.update_user_preferences_category(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_user_preferences_category_mapped_args(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
        )
        return await self._aupdate_user_preferences_category_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        distinct_id: str,
        category_slug: str,
        preference: typing.Optional[str] = None,
        opt_out_channels: typing.Optional[SubscriberUpdateUserPreferencesCategoryRequestOptOutChannels] = None,
        tenant_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_user_preferences_category_mapped_args(
            distinct_id=distinct_id,
            category_slug=category_slug,
            preference=preference,
            opt_out_channels=opt_out_channels,
            tenant_id=tenant_id,
        )
        return self._update_user_preferences_category_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
        )

