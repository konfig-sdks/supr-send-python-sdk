# coding: utf-8

"""
    SuprSend API

    SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

    The version of the OpenAPI document: 1.2.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from supr_send_python_sdk import schemas  # noqa: F401


class BrandCreateOrUpdateRequestSocialLinks(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    urls of social media accounts of the brand. If you really want to remove any social link, you must set its value="" (instead of null)
    """


    class MetaOapg:
        
        class properties:
            website = schemas.StrSchema
            facebook = schemas.StrSchema
            linkedin = schemas.StrSchema
            twitter = schemas.StrSchema
            instagram = schemas.StrSchema
            medium = schemas.StrSchema
            discord = schemas.StrSchema
            telegram = schemas.StrSchema
            youtube = schemas.StrSchema
            __annotations__ = {
                "website": website,
                "facebook": facebook,
                "linkedin": linkedin,
                "twitter": twitter,
                "instagram": instagram,
                "medium": medium,
                "discord": discord,
                "telegram": telegram,
                "youtube": youtube,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["facebook"]) -> MetaOapg.properties.facebook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedin"]) -> MetaOapg.properties.linkedin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter"]) -> MetaOapg.properties.twitter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instagram"]) -> MetaOapg.properties.instagram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medium"]) -> MetaOapg.properties.medium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discord"]) -> MetaOapg.properties.discord: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["telegram"]) -> MetaOapg.properties.telegram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["youtube"]) -> MetaOapg.properties.youtube: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["website", "facebook", "linkedin", "twitter", "instagram", "medium", "discord", "telegram", "youtube", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["facebook"]) -> typing.Union[MetaOapg.properties.facebook, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedin"]) -> typing.Union[MetaOapg.properties.linkedin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter"]) -> typing.Union[MetaOapg.properties.twitter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instagram"]) -> typing.Union[MetaOapg.properties.instagram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medium"]) -> typing.Union[MetaOapg.properties.medium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discord"]) -> typing.Union[MetaOapg.properties.discord, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["telegram"]) -> typing.Union[MetaOapg.properties.telegram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["youtube"]) -> typing.Union[MetaOapg.properties.youtube, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["website", "facebook", "linkedin", "twitter", "instagram", "medium", "discord", "telegram", "youtube", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        facebook: typing.Union[MetaOapg.properties.facebook, str, schemas.Unset] = schemas.unset,
        linkedin: typing.Union[MetaOapg.properties.linkedin, str, schemas.Unset] = schemas.unset,
        twitter: typing.Union[MetaOapg.properties.twitter, str, schemas.Unset] = schemas.unset,
        instagram: typing.Union[MetaOapg.properties.instagram, str, schemas.Unset] = schemas.unset,
        medium: typing.Union[MetaOapg.properties.medium, str, schemas.Unset] = schemas.unset,
        discord: typing.Union[MetaOapg.properties.discord, str, schemas.Unset] = schemas.unset,
        telegram: typing.Union[MetaOapg.properties.telegram, str, schemas.Unset] = schemas.unset,
        youtube: typing.Union[MetaOapg.properties.youtube, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BrandCreateOrUpdateRequestSocialLinks':
        return super().__new__(
            cls,
            *args,
            website=website,
            facebook=facebook,
            linkedin=linkedin,
            twitter=twitter,
            instagram=instagram,
            medium=medium,
            discord=discord,
            telegram=telegram,
            youtube=youtube,
            _configuration=_configuration,
            **kwargs,
        )
