# coding: utf-8

"""
    SuprSend API

    SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

    The version of the OpenAPI document: 1.2.1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from supr_send_python_sdk.pydantic.workflow_configure_trigger_request_delivery import WorkflowConfigureTriggerRequestDelivery
from supr_send_python_sdk.pydantic.workflow_configure_trigger_request_users import WorkflowConfigureTriggerRequestUsers

class WorkflowConfigureTriggerRequest(BaseModel):
    # Unique name of the workflow. The workflow name should be easily identifiable for your reference at a later stage. You can see workflow-related analytics on the workflow page (how many notifications were sent, delivered, clicked or interacted).
    name: str = Field(alias='name')

    # Unique slug name of the template created on SuprSend dashboard. You can get this by clicking on the clipboard icon next to the Template name on SuprSend templates page.
    template: str = Field(alias='template')

    # Category in which your notification belongs. You can understand more about them in the 'Notification Category' documentation
    notification_category: str = Field(alias='notification_category')

    users: WorkflowConfigureTriggerRequestUsers = Field(alias='users')

    # Mock data to replace the template variables.
    data: typing.Optional[str] = Field(None, alias='data')

    delivery: typing.Optional[WorkflowConfigureTriggerRequestDelivery] = Field(None, alias='delivery')

    # Workflow will be halted for the time mentioned in delay, and become active once the delay period is over. Format - `XXdXXhXXmXXs` or if its number (n) then delay is in seconds (n)
    delay: typing.Optional[str] = Field(None, alias='delay')

    # Trigger workflow on a specific date-time. Format - date string in ISO 8601 eg. \"2022-08-27T20:14:51.643Z\"
    trigger_at: typing.Optional[date] = Field(None, alias='trigger_at')

    # string identifier of the brand this workflow is associated with
    brand_id: typing.Optional[str] = Field(None, alias='brand_id')

    # Idempotency_key (valid for 24hrs)
    $idempotency_key_: typing.Optional[str] = Field(None, alias='$idempotency_key')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
